# 1. Create a service account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clean-pods
  namespace: default

# 2. Create a role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-cleaner-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "delete"]

# 3. Attach the role to the SA
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-cleaner-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-cleaner-role
subjects:
- kind: ServiceAccount
  name: clean-pods
  namespace: default

# 4. Create a cronjob to remove failed pods with a certain age to them.
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: pod-cleaner
spec:
  schedule: "0 0 * * *"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: clean-pods
          containers:
          - name: kubectl-runner
            image: bitnami/kubectl:latest
            command: ["sh", "-c", "kubectl delete pods --all-namespaces --field-selector=status.phase=Failed | awk 'match($6,/[1-9]+d/)' | grep -v -e 'default' -e 'openshift' -e 'kube'"]
          restartPolicy: Never
